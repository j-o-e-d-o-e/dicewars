import{Player}from"./player.js";import{drawCluster,drawDices}from"./draw.js";import Stats from"./stats.js";class Human extends Player{constructor(s){super(s),this.clickableClusters=void 0,this.clickedCluster=void 0}click(e){if(void 0===this.clickedCluster){var s=this.clickableClusters.find(s=>s.containsPoint(e));void 0!==s&&(this.clickedCluster=s,console.log(`selected=${this.clickedCluster.id} (dices: ${this.clickedCluster.dices})`),drawCluster(this.clickedCluster.corners))}else if(this.clickedCluster.containsPoint(e))drawCluster(this.clickedCluster.corners,this.id),this.clickedCluster=void 0;else{s=this.clickedCluster.adjacentClustersFromCluster().filter(s=>s.playerId!==this.id).find(s=>s.containsPoint(e));if(void 0!==s){var i=Player.roleDice(this.clickedCluster.dices),t=Player.roleDice(s.dices),l=(console.log(`attacks ${s.playerId}: ${this.clickedCluster.id} vs ${s.id} -> thrown dices: ${i} vs `+t),this.clickedCluster.dices);if(this.clickedCluster.dices=1,drawCluster(this.clickedCluster.corners,this.id),drawDices(this.clickedCluster),t<i)return Stats.set.successfulAttacks(),t=s.playerId,s.playerId=this.id,s.dices=l-1,drawCluster(s.corners,this.id),drawDices(s),this.clickedCluster=void 0,t;Stats.set.unsuccessfulAttacks();i=this.clickableClusters.findIndex(s=>s.id===this.clickedCluster.id);this.clickableClusters.splice(i,1),this.clickedCluster=void 0}}}setClickables(s){this.clickableClusters=s.filter(s=>s.playerId===this.id&&1<s.dices&&s.adjacentClustersFromCluster().some(s=>s.playerId!==this.id))}}export{Human};