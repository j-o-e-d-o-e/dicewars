import{TIMEOUT_BG,TIMEOUT_SM}from"./info.js";import{Player}from"./player.js";import{drawCluster,drawDices}from"./draw.js";class Comp extends Player{constructor(e){super(e)}async turn(r,t,e,i){super.turn();let s=this.path(r);for(;s;){let e=s.shift();for(var a of s.slice(0,-1)){var d=await this.attack(e,a);if(void 0===d)break;if(this.afterSuccessfulMove(r,t,d))return void await i(!1);e=a}s=this.path(r)}var l=r.filter(e=>e.playerId===this.id&&1<e.dices).sort((e,r)=>r.dices-e.dices);let o=l.shift();for(;o;){var c=this.mightyOther(r,t),c=this.target(o,c);if(c){var f=await this.attack(o,c);if(void 0===f)o=l.shift();else{if(this.afterSuccessfulMove(r,t,f))return void await i(!1);o=c}}else o=l.shift()}e()}attack(a,d){return new Promise(t=>{let i=Player.roleDice(a.dices),s=Player.roleDice(d.dices);console.log(`attacks ${d.playerId}: ${a.id} vs ${d.id} -> thrown dices: ${i} vs `+s),drawCluster(a.corners),setTimeout(()=>{drawCluster(d.corners),setTimeout(()=>{var e,r=a.dices;a.dices=1,drawDices(a),drawCluster(a.corners,this.id),i>s?(e=d.playerId,d.playerId=this.id,d.dices=r-1,drawDices(d),drawCluster(d.corners,this.id),t(e)):(drawCluster(d.corners,d.playerId),t(void 0))},TIMEOUT_BG)},TIMEOUT_SM)})}mightyOther(e,r){let t=Math.floor(e.length/3);e=r.filter(e=>e.id!==this.id&&e.dices>t);if(0<e.length)return e.reduce((e,r)=>!e||r.dices>e.dices?r:e)}target(r,t){let e=r.adjacentClustersFromCluster().filter(e=>e.playerId!==this.id);var i,s=(e=(e=t?e.filter(e=>e.playerId===t.id):e).filter(e=>r.dices>e.dices-(8===r.dices))).reduce((e,r)=>((e[r.dices]=e[r.dices]||[]).push(r),e),{}),a=[...Array(r.dices-1).keys()].reverse();a[a.length-1]=r.dices-1,8===r.dices&&a.push(8);for(i of a)if(i in s)return s[i][Math.floor(Math.random()*s[i].length)]}path(e){let r=[];for(var t of e.filter(e=>e.playerId===this.id))r.flat().includes(t)||r.push(t.region());let i;for(var[s,a]of(r=r.map(e=>e.filter(e=>e.adjacentClustersFromCluster().some(e=>e.playerId!==this.id)))).entries())for(var d of a)for(var[l,o]of r.entries())if(a!==o)for(var c of o){var f,h,c=d.path(c);c&&(!i||(f=a.length+o.length,(h=r[i.from].length+r[i.to].length)<f)||f===h&&c.length<i.path.length)&&(i={from:s,to:l,path:c})}return i?.path}}export{Comp};