import{TIMEOUT_BG,TIMEOUT_SM}from"./info.js";import{Player}from"./player.js";import{drawCluster,drawDices}from"./draw.js";class Comp extends Player{static thresholdMighty;static thresholdVeryMighty;static thresholds(e){Comp.thresholdMighty=Math.ceil(e.length/3),Comp.thresholdVeryMighty=Math.ceil(e.length/2)}constructor(e){super(e)}async turn(t,r,e,i){super.turn();let s=this.path(t),h=this.mightyOthers(t,r);for(;s&&(0===h.length||h[0].dices<=Comp.thresholdVeryMighty||s.slice(1,-1).every(e=>e.playerId===h[0].id));){let e=s.shift();for(var a of s.slice(0,-1)){var l=await this.attack(e,a);if(void 0===l)break;if(this.afterSuccessfulMove(t,r,l))return void await i(!1);e=a}s=this.path(t),h=this.mightyOthers(t,r)}var o=t.filter(e=>e.playerId===this.id&&1<e.dices).sort((e,t)=>t.dices-e.dices);let d=o.shift();for(;d;){h=this.dices>Comp.thresholdMighty?[]:this.mightyOthers(t,r);var c=this.target(d,h);if(c){var f=await this.attack(d,c);if(void 0===f)d=o.shift();else{if(this.afterSuccessfulMove(t,r,f))return void await i(!1);d=1<c.dices?c:o.shift()}}else d=o.shift()}e()}attack(h,a){return new Promise(r=>{let i=Player.roleDice(h.dices),s=Player.roleDice(a.dices);console.log(`attacks ${a.playerId}: ${h.id} vs ${a.id} -> thrown dices: ${i} vs `+s),drawCluster(h.corners),setTimeout(()=>{drawCluster(a.corners),setTimeout(()=>{var e,t=h.dices;h.dices=1,drawDices(h),drawCluster(h.corners,this.id),i>s?(e=a.playerId,a.playerId=this.id,a.dices=t-1,drawDices(a),drawCluster(a.corners,this.id),r(e)):(drawCluster(a.corners,a.playerId),r(void 0))},TIMEOUT_BG)},TIMEOUT_SM)})}mightyOthers(e,t){return t.filter(e=>e.id!==this.id&&e.dices>Comp.thresholdMighty).sort((e,t)=>t.dices-e.dices)}target(t,r){let i=t.adjacentClustersFromCluster().filter(e=>e.playerId!==this.id);if(0!==i.length){if(0<r.length){let e;for(let t of r)if(0<(e=i.filter(e=>e.playerId===t.id)).length)break;i=e}if(0!==(i=i.filter(e=>t.dices>e.dices-(8===t.dices))).length){var e,s=i.reduce((e,t)=>((e[t.dices]=e[t.dices]||[]).push(t),e),{}),r=[...Array(t.dices-1).keys()].reverse();r[r.length-1]=t.dices-1,8===t.dices&&r.push(8);for(e of r)if(e in s)return s[e][Math.floor(Math.random()*s[e].length)]}}}path(e){let t=[];for(var r of e.filter(e=>e.playerId===this.id))t.flat().includes(r)||t.push(r.region());let i;for(var[s,h]of(t=t.map(e=>e.filter(e=>e.adjacentClustersFromCluster().some(e=>e.playerId!==this.id)))).entries())for(var a of h)for(var[l,o]of t.entries())if(h!==o)for(var d of o){var c,f,d=a.path(d);d&&(!i||(c=h.length+o.length,(f=t[i.from].length+t[i.to].length)<c)||c===f&&d.length<i.path.length)&&(i={from:s,to:l,path:d})}return i?.path}}export{Comp};