import{TIMEOUT_BG,TIMEOUT_SM}from"./info.js";import{Player}from"./player.js";import{drawCluster,drawDices}from"./draw.js";class Comp extends Player{constructor(e){super(e)}async turn(r,t,e,i){super.turn();let s=this.path(r);for(;s;){let e=s.shift();for(var a of s.slice(0,-1)){var l=await this.attack(e,a);if(void 0===l)break;if(this.afterSuccessfulMove(r,t,l))return void await i(!1);e=a}s=this.path(r)}var o=r.filter(e=>e.playerId===this.id&&1<e.dices).sort((e,r)=>r.dices-e.dices);let d=o.shift();for(;d;){var f=this.mightyOthers(r,t),f=this.target(d,f);if(f){var h=await this.attack(d,f);if(void 0===h)d=o.shift();else{if(this.afterSuccessfulMove(r,t,h))return void await i(!1);d=f}}else d=o.shift()}e()}attack(a,l){return new Promise(t=>{let i=Player.roleDice(a.dices),s=Player.roleDice(l.dices);console.log(`attacks ${l.playerId}: ${a.id} vs ${l.id} -> thrown dices: ${i} vs `+s),drawCluster(a.corners),setTimeout(()=>{drawCluster(l.corners),setTimeout(()=>{var e,r=a.dices;a.dices=1,drawDices(a),drawCluster(a.corners,this.id),i>s?(e=l.playerId,l.playerId=this.id,l.dices=r-1,drawDices(l),drawCluster(l.corners,this.id),t(e)):(drawCluster(l.corners,l.playerId),t(void 0))},TIMEOUT_BG)},TIMEOUT_SM)})}mightyOthers(e,r){let t=Math.floor(e.length/3);return r.filter(e=>e.id!==this.id&&e.dices>t).sort((e,r)=>r.dices-e.dices)}target(r,t){let i=r.adjacentClustersFromCluster().filter(e=>e.playerId!==this.id);if(0<t.length){let e;for(let r of t)if(0<(e=i.filter(e=>e.playerId===r.id)).length)break;i=e}if(0!==(i=i.filter(e=>r.dices>e.dices-(8===r.dices))).length){var e,s=i.reduce((e,r)=>((e[r.dices]=e[r.dices]||[]).push(r),e),{}),t=[...Array(r.dices-1).keys()].reverse();t[t.length-1]=r.dices-1,8===r.dices&&t.push(8);for(e of t)if(e in s)return s[e][Math.floor(Math.random()*s[e].length)]}}path(e){let r=[];for(var t of e.filter(e=>e.playerId===this.id))r.flat().includes(t)||r.push(t.region());let i;for(var[s,a]of(r=r.map(e=>e.filter(e=>e.adjacentClustersFromCluster().some(e=>e.playerId!==this.id)))).entries())for(var l of a)for(var[o,d]of r.entries())if(a!==d)for(var f of d){var h,c,f=l.path(f);f&&(!i||(h=a.length+d.length,(c=r[i.from].length+r[i.to].length)<h)||h===c&&f.length<i.path.length)&&(i={from:s,to:o,path:f})}return i?.path}}export{Comp};