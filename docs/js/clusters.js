import{CLUSTERS_MAX}from"./info.js";import{Cluster}from"./cluster.js";const MIN_NEIGHBOURS_NODE=3;let paths,bigCount,smallCount;function createClusters(t){[paths,bigCount,smallCount]=[4,0,0];for(var e,o=[new Cluster(t)];o.length<=paths;){var r=getRandomAdjacentNodeFromCluster(o[0]);void 0!==r&&o.push(new Cluster(r))}for(;o.length<CLUSTERS_MAX&&0<=paths;){var n=getRandomAdjacentNodeFromCluster(o[getNextClusterIndex()]);void 0!==n&&(o.push(new Cluster(n)),(o.length-1)%paths==0)&&(bigCount+=paths)}Cluster.count=0,o.sort((t,e)=>t.centerPos.y-e.centerPos.y);for(e of o)e.id=Cluster.count++,e.neighbours(),delete e.nodes;return log(o),o}function getRandomAdjacentNodeFromCluster(t){t=t.adjacentNodesFromCluster().filter(t=>void 0===t.cluster&&t.adjacentNodesFromNode().filter(t=>void 0===t.cluster).length>=MIN_NEIGHBOURS_NODE);if(0!==t.length)return t[Math.floor(Math.random()*t.length)];paths--,++smallCount>=paths&&(smallCount=0)}function getNextClusterIndex(){var t=bigCount+smallCount+++1;return smallCount===paths&&(smallCount=0),t}function log(t){console.log(`${t.length} clusters created with ${t.reduce((t,e)=>t+e.dices,0)} dices`)}export{createClusters};